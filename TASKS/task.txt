â€œWe are converting our existing monorepo of the main system (currently full-stack, excluding microservices) into a **pure backend repository**. The main system backend will be developed separately from the frontend and the microservices (Audit Logs and Budget Request microservices are already handled in their own repos).

The goals are:

* **Optimization and performance**
* **Clean, maintainable file structure** (services, controllers, models, helpers, middlewares, config)
* **Basic security** (password hashing, JWT tokens, key management)
* **Caching where needed**
* **Standard coding and development practices**

I need **detailed instructions/checklist** on how to convert the monorepo into a pure backend repo, including:

1. **File and folder cleanup**

   * Identify and remove all frontend-specific files (React components, pages, assets, styles, Next.js configs).
   * Retain backend-related folders: API routes, services, database models, middlewares, helpers, and configs.
   * Organize the remaining code into clear backend structure.

2. **Dependency cleanup**

   * Remove all frontend dependencies (`react`, `next`, `tailwind`, etc.) while keeping backend-related dependencies (`express`, `prisma`, `jsonwebtoken`, caching libraries).

3. **Project configuration**

   * Update scripts in `package.json` for backend development (`pnpm run dev` for backend only).
   * Adjust environment variables for backend-only usage (`DATABASE_URL`, `BACKEND_PORT`, JWT secrets).

4. **Optimization & Performance**

   * Implement caching for frequently queried data.
   * Ensure asynchronous handling of I/O operations.
   * Optimize database queries and indexing.
   * Structure services for reusability and modularity.

5. **Security**

   * Add password hashing and token-based authentication.
   * Validate and sanitize inputs.
   * Keep secrets in environment variables only.
   * Implement role-based access control for sensitive endpoints.

6. **Standard Practices**

   * Centralize error handling and logging.
   * Follow coding conventions (linting, formatting).
   * Add unit and integration tests.
   * Document APIs clearly for future frontend or microservice integration.

7. **Deployment & Maintainability**

   * Prepare the backend for containerization (Docker) if needed.
   * Ensure compatibility with CI/CD pipelines.
   * Monitor backend performance and errors separately from frontend.

**Deliverable:** A pure backend repository for the main system, fully decoupled from frontend code, following optimization, security, and maintainable standards.