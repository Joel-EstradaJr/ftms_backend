# 🔗 AUDIT LOGS MICROSERVICE - INTEGRATION GUIDE

## 📋 Overview
This guide contains all necessary information for other microservices (Finance, HR, Inventory, Operations) to successfully integrate with the Audit Logs Microservice.

---

## 🌐 Base Configuration

### Audit Logs Microservice Endpoints
```
Backend API: http://localhost:4004
Frontend UI: http://localhost:4003
```

### Your Microservice Must Have in `.env`:
```bash
# Audit Logs Integration
AUDIT_LOGS_API_URL=http://localhost:4004
AUDIT_LOGS_API_KEY=YOUR_DEPARTMENT_API_KEY  # See "API Keys" section below

# Optional: For direct UI integration
AUDIT_LOGS_UI_URL=http://localhost:4003/audit
```

---

## 🔑 API Keys (Required for Creating Audit Logs)

### Default API Keys by Department:

| Department | API Key | Usage |
|------------|---------|-------|
| **Finance** | `FINANCE_DEFAULT_KEY` | Include in `x-api-key` header when creating logs |
| **HR** | `HR_DEFAULT_KEY` | Include in `x-api-key` header when creating logs |
| **Inventory** | `INVENTORY_DEFAULT_KEY` | Include in `x-api-key` header when creating logs |
| **Operations** | `OPERATIONS_DEFAULT_KEY` | Include in `x-api-key` header when creating logs |

### How to Store in Your `.env`:
```bash
# Your microservice .env file
AUDIT_API_KEY=FINANCE_DEFAULT_KEY  # Use your department's key
```

⚠️ **Important**: Keep these keys secret and match exactly as shown above (case-sensitive).

---

## 🔐 JWT Token Requirements (For Viewing Audit Logs)

### JWT Payload Structure Required:
```typescript
{
  sub: "user_id_here",           // User's unique ID (string)
  username: "john.doe",          // User's username (string)
  role: "Finance Admin",         // User's role (string) - See valid roles below
  iat: 1234567890,               // Issued at (timestamp)
  exp: 1234567890                // Expiration (timestamp)
}
```

### The Audit Logs Microservice Extracts:
```typescript
{
  id: payload.sub,               // From JWT sub claim
  username: payload.username,    // From JWT username claim
  role: payload.role             // From JWT role claim - CRITICAL for access control
}
```

### JWT Secret (Must Match):
```bash
# In Audit Logs Microservice .env:
JWT_SECRET=8f7b3a2c9d4e6f8a0b1c2d3e4f5g6h7i

# Your microservice MUST use the SAME JWT_SECRET when issuing tokens
# Or integrate with the HR Auth Microservice that issues the tokens
```

---

## 👥 Valid User Roles

### Role Format Pattern:
- Pattern 1: `"DepartmentName Admin"` or `"DepartmentName Non-Admin"`
- Pattern 2: `"SuperAdmin"` (full access)

### SuperAdmin Roles (Full Access to All Departments):
```
"SuperAdmin"
```

### Department Admin Roles (Can View All Logs in Their Department):
```
"Finance Admin"
"HR Admin"
"Inventory Admin"
"Operations Admin"
```

### Department Non-Admin Roles (Can Only View Their Own Logs):
```
"Finance Non-Admin"
"Finance Secretary"
"Finance Staff"
"HR Non-Admin"
"HR Clerk"
"HR Staff"
"Inventory Non-Admin"
"Inventory Staff"
"Operations Non-Admin"
"Operations Staff"
```

### Role Detection Logic:
```typescript
// SuperAdmin: Exact match "SuperAdmin"
isSuperAdmin(role) → role === "SuperAdmin"

// Department Admin: Contains "Admin" but NOT "SuperAdmin"
isDepartmentAdmin(role) → role.includes("Admin") && role !== "SuperAdmin"

// Non-Admin: Everything else
isNonAdmin(role) → !isSuperAdmin(role) && !isDepartmentAdmin(role)
```

### Department Extraction from Role:
```typescript
// Examples:
"Finance Admin"     → "finance"
"HR Non-Admin"      → "hr"
"Inventory Staff"   → "inventory"
"Operations Clerk"  → "operations"
```

---

## 📤 Creating Audit Logs (POST Request)

### Endpoint:
```
POST http://localhost:4004/api/audit-logs
```

### Required Headers:
```http
Content-Type: application/json
x-api-key: YOUR_DEPARTMENT_API_KEY
```

### Request Body Structure:
```typescript
{
  // REQUIRED FIELDS
  moduleName: string,           // Module/feature name (e.g., "Expense Management")
  action: string,               // Action performed (e.g., "CREATE", "UPDATE", "DELETE")
  performedBy: string,          // User ID who performed the action
  
  // HIGHLY RECOMMENDED FIELDS
  performedByName?: string,     // User's full name (e.g., "Juan Dela Cruz")
  performedByRole?: string,     // User's role (e.g., "Finance Admin")
  recordId?: string,            // Record/entity ID (e.g., "EXP-001")
  recordCode?: string,          // Alternative record identifier
  
  // CHANGE TRACKING (for UPDATE actions)
  oldValues?: string | object,  // Previous values (JSON string or object)
  newValues?: string | object,  // New values (JSON string or object)
  changedFields?: string | object, // List of changed fields
  
  // ADDITIONAL CONTEXT
  reason?: string,              // Reason for action (e.g., "Approved by manager")
  metadata?: string | object,   // Additional metadata
  
  // REQUEST CONTEXT (auto-captured if not provided)
  ipAddress?: string,           // User's IP address
  userAgent?: string,           // Browser/client info
  requestMethod?: string,       // HTTP method (auto-captured)
  requestPath?: string,         // Request path (auto-captured)
  
  // PERFORMANCE
  processingTimeMs?: number     // Time taken to process (optional)
}
```

### Example Request (Finance - Create Expense):
```javascript
// In your Finance microservice
const logAuditAction = async (actionData) => {
  try {
    const response = await fetch('http://localhost:4004/api/audit-logs', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.AUDIT_API_KEY || 'FINANCE_DEFAULT_KEY'
      },
      body: JSON.stringify({
        moduleName: 'Expense Management',
        recordId: 'EXP-20251022-001',
        recordCode: 'EXP-001',
        action: 'CREATE',
        performedBy: 'emp101',
        performedByName: 'Juan Dela Cruz',
        performedByRole: 'Finance Admin',
        oldValues: null,
        newValues: JSON.stringify({
          amount: 5000,
          category: 'Office Supplies',
          description: 'Printer ink and paper',
          date: '2025-10-22'
        }),
        reason: 'Regular office supplies purchase',
        ipAddress: req.ip || '127.0.0.1',
        userAgent: req.headers['user-agent']
      })
    });
    
    const result = await response.json();
    console.log('Audit log created:', result);
  } catch (error) {
    console.error('Failed to create audit log:', error);
  }
};
```

### Example Request (HR - Update Employee):
```javascript
await fetch('http://localhost:4004/api/audit-logs', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'x-api-key': 'HR_DEFAULT_KEY'
  },
  body: JSON.stringify({
    moduleName: 'Employee Management',
    recordId: 'EMP-2025-005',
    action: 'UPDATE',
    performedBy: 'admin001',
    performedByName: 'Maria Santos',
    performedByRole: 'HR Admin',
    oldValues: JSON.stringify({ position: 'Staff', salary: 25000 }),
    newValues: JSON.stringify({ position: 'Senior Staff', salary: 30000 }),
    changedFields: JSON.stringify(['position', 'salary']),
    reason: 'Annual promotion'
  })
});
```

### Success Response (201 Created):
```json
{
  "success": true,
  "message": "Audit log created successfully",
  "data": {
    "id": 123,
    "processingTimeMs": 45
  }
}
```

### Error Response (400/401/500):
```json
{
  "success": false,
  "message": "Error message here",
  "error": "Detailed error",
  "code": "ERROR_CODE"
}
```

---

## 📥 Viewing Audit Logs (GET Request)

### Endpoint:
```
GET http://localhost:4004/api/audit-logs
```

### Required Headers:
```http
Authorization: Bearer YOUR_JWT_TOKEN
```

### Query Parameters (All Optional):
```typescript
{
  // Filtering
  userId?: string,              // Filter by user who performed action
  service?: string,             // Filter by department: "finance" | "hr" | "inventory" | "operations"
  moduleName?: string,          // Filter by module name
  action?: string,              // Filter by action: "CREATE" | "UPDATE" | "DELETE" | etc.
  dateFrom?: string,            // Start date (YYYY-MM-DD)
  dateTo?: string,              // End date (YYYY-MM-DD)
  
  // Pagination
  page?: number,                // Page number (default: 1)
  limit?: number,               // Items per page (default: 10, max: 100)
  
  // Sorting
  sortBy?: string,              // Sort field (default: "performedAt")
  sortOrder?: "asc" | "desc"    // Sort order (default: "desc")
}
```

### Example Request:
```javascript
// In your frontend application
const fetchAuditLogs = async (jwtToken) => {
  const params = new URLSearchParams({
    service: 'finance',
    action: 'CREATE',
    dateFrom: '2025-10-01',
    dateTo: '2025-10-31',
    page: '1',
    limit: '20',
    sortBy: 'performedAt',
    sortOrder: 'desc'
  });
  
  const response = await fetch(
    `http://localhost:4004/api/audit-logs?${params}`,
    {
      headers: {
        'Authorization': `Bearer ${jwtToken}`
      }
    }
  );
  
  const result = await response.json();
  return result;
};
```

### Success Response (200 OK):
```json
{
  "success": true,
  "message": "Audit logs retrieved successfully",
  "data": [
    {
      "id": 123,
      "sourceService": "finance",
      "moduleName": "Expense Management",
      "recordId": "EXP-001",
      "recordCode": "EXP-001",
      "action": "CREATE",
      "performedBy": "emp101",
      "performedByName": "Juan Dela Cruz",
      "performedByRole": "Finance Admin",
      "performedAt": "2025-10-22T08:30:00.000Z",
      "ipAddress": "192.168.1.100",
      "userAgent": "Mozilla/5.0...",
      "oldValues": null,
      "newValues": "{\"amount\":5000,\"category\":\"Office Supplies\"}",
      "changedFields": null,
      "reason": "Regular purchase",
      "metadata": null
    }
  ],
  "meta": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "totalPages": 8
  }
}
```

### Access Control Applied:
- **SuperAdmin**: Sees ALL logs from ALL departments
- **Finance Admin**: Sees ONLY Finance department logs (all users)
- **Finance Staff**: Sees ONLY their own logs (where `performedBy = their_user_id`)

---

## 🔒 Access Control Rules

### Rule 1: SuperAdmin
```typescript
Role: "SuperAdmin"
Access: ALL logs from ALL departments
Filter: None (unrestricted)
```

### Rule 2: Department Admin
```typescript
Role: "Finance Admin", "HR Admin", etc.
Access: ALL logs from THEIR department only
Filter: WHERE sourceService = "finance" (extracted from role)
Example: 
  - Finance Admin sees all Finance logs
  - HR Admin sees all HR logs
  - Cannot cross-view other departments
```

### Rule 3: Non-Admin
```typescript
Role: "Finance Staff", "HR Clerk", etc.
Access: ONLY their OWN logs
Filter: WHERE performedBy = user_id
Example:
  - User emp101 sees only logs where performedBy = "emp101"
```

---

## 🔧 Network Configuration

### Audit Logs Microservice Must Have:
```bash
# In Audit Logs .env file
PORT=4003                                  # Frontend port
BACKEND_PORT=4004                          # Backend API port
CORS_ORIGIN=http://localhost:4003          # Allow frontend access
```

### Your Microservice Should Configure:
```bash
# CORS - If Audit Logs needs to call your API
CORS_ORIGIN=http://localhost:4004

# Or allow multiple origins
CORS_ORIGINS=http://localhost:4003,http://localhost:4004,http://localhost:YOUR_PORT
```

---

## 📊 Common Integration Patterns

### Pattern 1: Log Every CRUD Operation
```javascript
// In your service/controller
class ExpenseService {
  async createExpense(data, user) {
    // 1. Create the expense
    const expense = await db.expense.create({ data });
    
    // 2. Log the action to Audit Logs
    await logToAuditLogs({
      moduleName: 'Expense Management',
      recordId: expense.id,
      action: 'CREATE',
      performedBy: user.id,
      performedByName: user.name,
      performedByRole: user.role,
      newValues: expense
    });
    
    return expense;
  }
  
  async updateExpense(id, updates, user) {
    // 1. Get old values
    const oldExpense = await db.expense.findUnique({ where: { id } });
    
    // 2. Update the expense
    const newExpense = await db.expense.update({ where: { id }, data: updates });
    
    // 3. Log the change
    await logToAuditLogs({
      moduleName: 'Expense Management',
      recordId: id,
      action: 'UPDATE',
      performedBy: user.id,
      performedByName: user.name,
      performedByRole: user.role,
      oldValues: oldExpense,
      newValues: newExpense,
      changedFields: Object.keys(updates)
    });
    
    return newExpense;
  }
}
```

### Pattern 2: Centralized Audit Logger
```javascript
// auditLogger.js - Reusable utility
import fetch from 'node-fetch';

export const auditLogger = {
  async log(actionData) {
    try {
      const response = await fetch(process.env.AUDIT_LOGS_API_URL + '/api/audit-logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.AUDIT_API_KEY
        },
        body: JSON.stringify({
          ...actionData,
          // Auto-add timestamp if not provided
          timestamp: actionData.timestamp || new Date().toISOString()
        })
      });
      
      if (!response.ok) {
        console.error('Audit log failed:', await response.text());
      }
    } catch (error) {
      // Don't break main flow if audit logging fails
      console.error('Audit logging error:', error);
    }
  },
  
  // Convenience methods
  create: (module, record, user) => auditLogger.log({ moduleName: module, action: 'CREATE', ...record, ...user }),
  update: (module, record, user, changes) => auditLogger.log({ moduleName: module, action: 'UPDATE', ...record, ...user, ...changes }),
  delete: (module, record, user) => auditLogger.log({ moduleName: module, action: 'DELETE', ...record, ...user }),
  view: (module, record, user) => auditLogger.log({ moduleName: module, action: 'VIEW', ...record, ...user }),
  export: (module, record, user) => auditLogger.log({ moduleName: module, action: 'EXPORT', ...record, ...user })
};

// Usage in your code
await auditLogger.create('Expense Management', { recordId: 'EXP-001', newValues: expense }, user);
```

---

## 🧪 Testing Integration

### Test 1: Verify API Key Works
```bash
curl -X POST http://localhost:4004/api/audit-logs \
  -H "Content-Type: application/json" \
  -H "x-api-key: FINANCE_DEFAULT_KEY" \
  -d '{
    "moduleName": "Test Module",
    "action": "CREATE",
    "performedBy": "test_user",
    "performedByName": "Test User",
    "performedByRole": "Finance Admin"
  }'
```

**Expected**: 201 response with `{ success: true }`

### Test 2: Verify JWT Token Works
```bash
curl http://localhost:4004/api/audit-logs \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

**Expected**: 200 response with audit logs filtered by your role

### Test 3: Check Health
```bash
curl http://localhost:4004/api/health
```

**Expected**: `{ status: "ok", timestamp: "..." }`

---

## ⚠️ Common Integration Issues

### Issue 1: "Invalid API Key"
- ✅ Verify key matches exactly: `FINANCE_DEFAULT_KEY` (case-sensitive)
- ✅ Check header name is `x-api-key` (lowercase, with hyphen)
- ✅ Ensure API key is active in database (run seeder: `pnpm seed:apikeys`)

### Issue 2: "Unauthorized" when viewing logs
- ✅ Verify JWT token is valid and not expired
- ✅ Check JWT contains `role` field
- ✅ Ensure JWT_SECRET matches across all microservices
- ✅ Verify `Authorization: Bearer TOKEN` format (space after "Bearer")

### Issue 3: Can't see any logs (empty response)
- ✅ Check user's role - Non-Admins only see their own logs
- ✅ Verify `performedBy` in logs matches user's `id` from JWT
- ✅ Department Admins only see logs from their department

### Issue 4: CORS errors in browser
- ✅ Ensure `CORS_ORIGIN=http://localhost:4003` in Audit Logs `.env`
- ✅ Check if making request from correct origin
- ✅ Restart backend after changing CORS settings

---

## 📝 Checklist for Integration

### Before Integration:
- [ ] Obtain API key for your department
- [ ] Add `AUDIT_LOGS_API_URL` and `AUDIT_API_KEY` to your `.env`
- [ ] Verify JWT token structure includes `sub`, `username`, `role`
- [ ] Ensure JWT_SECRET matches (if issuing own tokens)
- [ ] Test network connectivity to `http://localhost:4004`

### During Integration:
- [ ] Implement audit logging in all CRUD operations
- [ ] Include proper user context (`performedBy`, `performedByName`, `role`)
- [ ] Handle audit logging failures gracefully (don't break main flow)
- [ ] Test with different user roles (Admin, Non-Admin, SuperAdmin)

### After Integration:
- [ ] Verify logs appear in Audit Logs UI (`http://localhost:4003/audit`)
- [ ] Test access control (users can only see what they should)
- [ ] Monitor for audit logging errors in your application logs
- [ ] Document your integration for your team

---

## 📞 Support & Questions

### Documentation Files:
- `BACKEND_README.md` - Backend architecture details
- `QUICKSTART.md` - Quick setup guide
- `HOW_TO_RUN.md` - Running the microservice
- `TESTING_AUTH.md` - Authentication testing guide

### Key Files for Reference:
- `task.txt` - Complete requirements specification
- `src/types/auditLog.d.ts` - TypeScript type definitions
- `src/routes/auditLogs.routes.ts` - API endpoint definitions

### Need Help?
Contact the Audit Logs Microservice team or refer to the source code in the repository.

---

## 🎯 Quick Reference Summary

| What | Value |
|------|-------|
| **Backend API** | `http://localhost:4004` |
| **Frontend UI** | `http://localhost:4003/audit` |
| **Create Log Endpoint** | `POST /api/audit-logs` |
| **View Logs Endpoint** | `GET /api/audit-logs` |
| **Auth for Creating** | API Key via `x-api-key` header |
| **Auth for Viewing** | JWT via `Authorization: Bearer` header |
| **Finance API Key** | `FINANCE_DEFAULT_KEY` |
| **HR API Key** | `HR_DEFAULT_KEY` |
| **Inventory API Key** | `INVENTORY_DEFAULT_KEY` |
| **Operations API Key** | `OPERATIONS_DEFAULT_KEY` |
| **JWT Secret** | `8f7b3a2c9d4e6f8a0b1c2d3e4f5g6h7i` |
| **SuperAdmin Role** | `"SuperAdmin"` |
| **Admin Role Format** | `"Finance Admin"`, `"HR Admin"`, etc. |
| **Non-Admin Format** | `"Finance Staff"`, `"HR Clerk"`, etc. |

---

**Last Updated**: October 22, 2025  
**Microservice Version**: 1.0.0  
**Compatible With**: Finance, HR, Inventory, Operations Microservices
