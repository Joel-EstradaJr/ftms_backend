generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountPayable {
  id               Int                   @id @default(autoincrement())
  referenceCode    String                @unique
  entityName       String
  entityType       String?
  description      String?
  amountDue        Decimal               @db.Decimal(12, 2)
  amountPaid       Decimal?              @default(0) @db.Decimal(12, 2)
  remainingBalance Decimal               @db.Decimal(12, 2)
  dueDate          DateTime
  frequency        InstallmentFrequency?
  interestRate     Decimal?              @db.Decimal(5, 2)
  isSettled        Boolean               @default(false)
  paymentStatus    String                @default("pending")
  nextPaymentDue   DateTime?
  createdBy        String?
  createdAt        DateTime              @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean               @default(false)

  @@index([dueDate, isSettled])
  @@index([entityName])
  @@index([isDeleted])
}

model AccountReceivable {
  id               Int                   @id @default(autoincrement())
  referenceCode    String                @unique
  entityName       String
  entityType       String?
  description      String?
  amountDue        Decimal               @db.Decimal(12, 2)
  amountPaid       Decimal?              @default(0) @db.Decimal(12, 2)
  remainingBalance Decimal               @db.Decimal(12, 2)
  dueDate          DateTime
  frequency        InstallmentFrequency?
  interestRate     Decimal?              @db.Decimal(5, 2)
  isSettled        Boolean               @default(false)
  collectionStatus String                @default("pending")
  lastReminderSent DateTime?
  reminderCount    Int                   @default(0)
  createdBy        String?
  createdAt        DateTime              @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean               @default(false)

  @@index([dueDate, isSettled])
  @@index([entityName])
  @@index([isDeleted])
}

model Asset {
  id                      Int       @id @default(autoincrement())
  assetCode               String    @unique
  assetName               String
  category                String
  acquisitionCost         Decimal   @db.Decimal(12, 2)
  acquisitionDate         DateTime
  currentValue            Decimal?  @db.Decimal(12, 2)
  depreciationRate        Decimal?  @db.Decimal(5, 2)
  accumulatedDepreciation Decimal?  @default(0) @db.Decimal(12, 2)
  salvageValue            Decimal?  @db.Decimal(12, 2)
  status                  String    @default("active")
  disposalDate            DateTime?
  disposalAmount          Decimal?  @db.Decimal(12, 2)
  location                String?
  serialNumber            String?
  remarks                 String?
  createdBy               String?
  createdAt               DateTime  @default(now())
  updatedBy               String?
  updatedAt               DateTime
  approvedBy              String?
  approvedAt              DateTime?
  rejectedBy              String?
  rejectedAt              DateTime?
  deletedBy               String?
  deletedAt               DateTime?
  isDeleted               Boolean   @default(false)

  @@index([category])
  @@index([isDeleted])
  @@index([status])
}

model Budget {
  id              Int            @id @default(autoincrement())
  department      String
  fiscalYear      Int
  fiscalPeriod    String
  allocatedAmount Decimal        @db.Decimal(12, 2)
  usedAmount      Decimal        @default(0) @db.Decimal(12, 2)
  reservedAmount  Decimal        @default(0) @db.Decimal(12, 2)
  remainingAmount Decimal        @db.Decimal(12, 2)
  periodStart     DateTime
  periodEnd       DateTime
  status          ApprovalStatus @default(PENDING)
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedBy       String?
  updatedAt       DateTime
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  deletedBy       String?
  deletedAt       DateTime?
  isDeleted       Boolean        @default(false)

  @@unique([department, fiscalYear, fiscalPeriod])
  @@index([department, periodStart])
  @@index([isDeleted])
  @@index([status])
}

model CachedEmployee {
  id             Int      @id @default(autoincrement())
  employeeNumber String   @unique
  firstName      String
  middleName     String?
  lastName       String
  suffix         String?
  phone          String?
  position       String
  departmentId   Int?
  department     String
  lastSyncedAt   DateTime
  sourceSystem   String   @default("HR")
  sourceEndpoint String   @default("/api/clean/hr_employees")
  isStale        Boolean  @default(false)

  @@index([department])
  @@index([employeeNumber])
  @@index([isStale])
  @@index([lastSyncedAt])
  @@index([position])
}

model CachedInventoryItem {
  id             Int      @id @default(autoincrement())
  itemCode       String?  @unique
  itemName       String
  category       String?
  supplierId     Int?
  supplierName   String?
  unitCost       Decimal  @db.Decimal(12, 2)
  stockOnHand    Int
  reorderLevel   Int?
  unitMeasure    String?
  lastSyncedAt   DateTime
  sourceSystem   String   @default("Inventory")
  sourceEndpoint String?
  isStale        Boolean  @default(false)

  @@index([category])
  @@index([isStale])
  @@index([itemCode])
  @@index([itemName])
  @@index([lastSyncedAt])
  @@index([supplierName])
}

model CachedPayrollData {
  id                     Int       @id @default(autoincrement())
  employeeNumber         String
  firstName              String
  middleName             String?
  lastName               String
  suffix                 String?
  employeeStatus         String
  hiredate               DateTime
  terminationDate        DateTime?
  basicRate              Decimal   @db.Decimal(12, 2)
  position               String
  department             String
  attendances            String?
  benefits               String?
  deductions             String?
  totalMonthlyBenefits   Decimal?  @db.Decimal(12, 2)
  totalMonthlyDeductions Decimal?  @db.Decimal(12, 2)
  netMonthlyRate         Decimal?  @db.Decimal(12, 2)
  lastSyncedAt           DateTime
  sourceSystem           String    @default("HR")
  sourceEndpoint         String    @default("/api/clean/hr_payroll")
  isStale                Boolean   @default(false)

  @@index([department])
  @@index([employeeNumber])
  @@index([employeeStatus])
  @@index([isStale])
  @@index([lastSyncedAt])
  @@index([position])
}

model CachedTrip {
  id                Int      @id @default(autoincrement())
  assignmentId      String   @unique
  busTripId         String   @unique
  busRoute          String
  isRevenueRecorded Boolean  @default(false)
  isExpenseRecorded Boolean  @default(false)
  dateAssigned      DateTime
  tripFuelExpense   Decimal? @db.Decimal(12, 2)
  tripRevenue       Decimal? @db.Decimal(12, 2)
  assignmentType    String
  assignmentValue   Decimal? @db.Decimal(5, 4)
  paymentMethod     String?
  driverName        String?
  conductorName     String?
  busPlateNumber    String?
  busType           String?
  bodyNumber        String?
  companyIncome     Decimal? @db.Decimal(12, 2)
  driverShare       Decimal? @db.Decimal(12, 2)
  conductorShare    Decimal? @db.Decimal(12, 2)
  tripDeficit       Decimal? @db.Decimal(12, 2)
  linkedRevenueId   Int?
  linkedExpenseId   Int?
  linkedLoanId      Int?
  lastSyncedAt      DateTime
  sourceSystem      String   @default("Operations")
  sourceEndpoint    String   @default("/api/clean/op_bus-trip-details")
  isStale           Boolean  @default(false)
  syncErrorMessage  String?

  @@index([assignmentId])
  @@index([busPlateNumber])
  @@index([busTripId])
  @@index([conductorName])
  @@index([dateAssigned])
  @@index([driverName])
  @@index([isRevenueRecorded, isExpenseRecorded])
  @@index([isStale])
  @@index([lastSyncedAt])
}

model Expense {
  id               Int       @id @default(autoincrement())
  code             String    @unique
  category         String
  subcategory      String?
  amount           Decimal   @db.Decimal(12, 2)
  dateRecorded     DateTime
  remarks          String?
  linkedPurchaseId Int?
  department       String?
  receiptUrl       String?
  externalRefNo    String?
  lastSyncedAt     DateTime?
  lastSyncStatus   String?
  createdBy        String?
  createdAt        DateTime  @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean   @default(false)

  @@index([category, dateRecorded])
  @@index([isDeleted])
  @@index([linkedPurchaseId])
  @@index([subcategory])
}

model ExternalSyncLog {
  id               Int       @id @default(autoincrement())
  sourceSystem     String
  sourceEndpoint   String
  syncType         String
  status           String
  recordsProcessed Int       @default(0)
  recordsCreated   Int       @default(0)
  recordsUpdated   Int       @default(0)
  recordsFailed    Int       @default(0)
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  duration         Int?
  errorMessage     String?
  errorDetails     String?
  triggeredBy      String?

  @@index([sourceSystem, syncType])
  @@index([startedAt])
  @@index([status])
}

model JournalEntry {
  id               Int       @id @default(autoincrement())
  referenceNo      String    @unique
  description      String
  debitAmount      Decimal   @db.Decimal(12, 2)
  creditAmount     Decimal   @db.Decimal(12, 2)
  linkedEntityType String?
  linkedEntityId   Int?
  accountCode      String?
  entryDate        DateTime
  isVerified       Boolean   @default(false)
  verifiedBy       String?
  verifiedAt       DateTime?
  isAutoGenerated  Boolean   @default(false)
  createdBy        String?
  createdAt        DateTime  @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean   @default(false)

  @@index([entryDate])
  @@index([isDeleted])
  @@index([linkedEntityType, linkedEntityId])
}

model Loan {
  id                        Int                   @id @default(autoincrement())
  loanType                  LoanType
  entityId                  Int
  entityName                String?
  principalAmount           Decimal               @db.Decimal(12, 2)
  interestRate              Decimal?              @db.Decimal(5, 2)
  totalPayable              Decimal?              @db.Decimal(12, 2)
  remainingBalance          Decimal               @db.Decimal(12, 2)
  dueDate                   DateTime?
  installmentFrequency      InstallmentFrequency?
  installmentAmount         Decimal?              @db.Decimal(12, 2)
  status                    ApprovalStatus        @default(PENDING)
  remarks                   String?
  tripDeficitRefNo          String?
  driverShare               Decimal?              @db.Decimal(12, 2)
  conductorShare            Decimal?              @db.Decimal(12, 2)
  driverId                  Int?
  conductorId               Int?
  isConvertedToEmployeeLoan Boolean               @default(false)
  convertedLoanId           Int?
  convertedAt               DateTime?
  externalRefNo             String?
  lastSyncedAt              DateTime?
  lastSyncStatus            String?
  createdBy                 String?
  createdAt                 DateTime              @default(now())
  updatedBy                 String?
  updatedAt                 DateTime
  approvedBy                String?
  approvedAt                DateTime?
  rejectedBy                String?
  rejectedAt                DateTime?
  deletedBy                 String?
  deletedAt                 DateTime?
  isDeleted                 Boolean               @default(false)
  LoanRepayment             LoanRepayment[]

  @@index([isDeleted])
  @@index([loanType, entityId])
  @@index([status])
  @@index([tripDeficitRefNo])
}

model LoanRepayment {
  id                Int             @id @default(autoincrement())
  loanId            Int
  installmentNumber Int
  amountDue         Decimal         @db.Decimal(12, 2)
  amountPaid        Decimal?        @db.Decimal(12, 2)
  dueDate           DateTime
  paidDate          DateTime?
  status            RepaymentStatus @default(PENDING)
  paymentMethod     String?
  remarks           String?
  createdBy         String?
  createdAt         DateTime        @default(now())
  updatedBy         String?
  updatedAt         DateTime
  approvedBy        String?
  approvedAt        DateTime?
  rejectedBy        String?
  rejectedAt        DateTime?
  deletedBy         String?
  deletedAt         DateTime?
  isDeleted         Boolean         @default(false)
  Loan              Loan            @relation(fields: [loanId], references: [id])

  @@index([isDeleted])
  @@index([loanId])
  @@index([status, dueDate])
}

model Payroll {
  id               Int            @id @default(autoincrement())
  employeeId       Int
  periodStart      DateTime
  periodEnd        DateTime
  baseSalary       Decimal        @db.Decimal(12, 2)
  allowances       Decimal?       @db.Decimal(12, 2)
  deductions       Decimal?       @db.Decimal(12, 2)
  netPay           Decimal        @db.Decimal(12, 2)
  disbursementDate DateTime?
  status           ApprovalStatus @default(PENDING)
  isDisbursed      Boolean        @default(false)
  disbursedBy      String?
  isFinalized      Boolean        @default(false)
  finalizedBy      String?
  finalizedAt      DateTime?
  externalRefNo    String?
  lastSyncedAt     DateTime?
  lastSyncStatus   String?
  createdBy        String?
  createdAt        DateTime       @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean        @default(false)

  @@index([employeeId, periodStart])
  @@index([isDeleted])
  @@index([status])
}

model PurchaseOrder {
  id                   Int                 @id @default(autoincrement())
  refNo                String              @unique
  purchaseRequestId    Int
  status               PurchaseOrderStatus @default(PENDING)
  totalAmount          Decimal             @db.Decimal(12, 2)
  supplierId           String
  supplierName         String
  supplierContact      String?
  supplierEmail        String?
  expectedDeliveryDate DateTime?
  actualDeliveryDate   DateTime?
  deliveryAddress      String?
  invoiceUrl           String?
  deliveryReceiptUrl   String?
  isAdjusted           Boolean             @default(false)
  adjustmentSummary    String?
  totalItemsOrdered    Int                 @default(0)
  totalItemsReceived   Int                 @default(0)
  totalItemsDamaged    Int                 @default(0)
  totalItemsMissing    Int                 @default(0)
  remarks              String?
  externalRefNo        String?
  lastSyncedAt         DateTime?
  lastSyncStatus       String?
  createdBy            String?
  createdAt            DateTime            @default(now())
  updatedBy            String?
  updatedAt            DateTime
  approvedBy           String?
  approvedAt           DateTime?
  closedBy             String?
  closedAt             DateTime?
  deletedBy            String?
  deletedAt            DateTime?
  isDeleted            Boolean             @default(false)
  PurchaseRequest      PurchaseRequest     @relation(fields: [purchaseRequestId], references: [id])
  PurchaseOrderItem    PurchaseOrderItem[]
  RefundReplacement    RefundReplacement?

  @@index([actualDeliveryDate])
  @@index([isDeleted])
  @@index([purchaseRequestId])
  @@index([status])
  @@index([supplierId])
}

model PurchaseOrderItem {
  id                    Int                     @id @default(autoincrement())
  purchaseOrderId       Int
  purchaseRequestItemId Int
  itemCode              String?
  itemName              String
  category              String?
  orderedQuantity       Int
  unitMeasure           String
  unitCost              Decimal                 @db.Decimal(12, 2)
  lineTotal             Decimal                 @db.Decimal(12, 2)
  receivedQuantity      Int?                    @default(0)
  damagedQuantity       Int?                    @default(0)
  missingQuantity       Int?                    @default(0)
  acceptedQuantity      Int?                    @default(0)
  itemStatus            String                  @default("pending")
  issueDescription      String?
  qualityCheckPassed    Boolean?
  qualityCheckNotes     String?
  qualityCheckedBy      String?
  qualityCheckedAt      DateTime?
  needsRefund           Boolean                 @default(false)
  needsReplacement      Boolean                 @default(false)
  refundAmount          Decimal?                @db.Decimal(12, 2)
  externalItemId        Int?
  lastSyncedAt          DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  isDeleted             Boolean                 @default(false)
  PurchaseOrder         PurchaseOrder           @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  PurchaseRequestItem   PurchaseRequestItem     @relation(fields: [purchaseRequestItemId], references: [id])
  RefundReplacementItem RefundReplacementItem[]

  @@index([itemStatus])
  @@index([needsRefund, needsReplacement])
  @@index([purchaseOrderId])
  @@index([purchaseRequestItemId])
}

model PurchaseRequest {
  id                     Int                   @id @default(autoincrement())
  refNo                  String                @unique
  department             String
  estimatedAmount        Decimal               @db.Decimal(12, 2)
  requestType            RequestType
  priority               Int                   @default(1)
  justification          String?
  status                 PurchaseRequestStatus @default(DRAFT)
  createdByInventory     Boolean               @default(true)
  inventoryMetadata      String?
  requiresBudgetApproval Boolean               @default(false)
  linkedBudgetRequestId  Int?
  budgetRequestCode      String?
  externalRefNo          String?
  lastSyncedAt           DateTime?
  lastSyncStatus         String?
  createdBy              String?
  createdAt              DateTime              @default(now())
  updatedBy              String?
  updatedAt              DateTime
  approvedBy             String?
  approvedAt             DateTime?
  rejectedBy             String?
  rejectedAt             DateTime?
  deletedBy              String?
  deletedAt              DateTime?
  isDeleted              Boolean               @default(false)
  PurchaseOrder          PurchaseOrder[]
  PurchaseRequestItem    PurchaseRequestItem[]

  @@index([createdAt])
  @@index([externalRefNo])
  @@index([isDeleted])
  @@index([linkedBudgetRequestId])
  @@index([requestType, priority])
  @@index([status, department])
}

model PurchaseRequestItem {
  id                Int                 @id @default(autoincrement())
  purchaseRequestId Int
  itemCode          String?
  itemName          String
  category          String?
  quantity          Int
  unitMeasure       String
  estimatedUnitCost Decimal             @db.Decimal(12, 2)
  estimatedAmount   Decimal             @db.Decimal(12, 2)
  supplierId        String?
  supplierName      String?
  supplierItemCode  String?
  itemStatus        ItemApprovalStatus  @default(PENDING)
  approvedQuantity  Int?
  approvedUnitCost  Decimal?            @db.Decimal(12, 2)
  approvedAmount    Decimal?            @db.Decimal(12, 2)
  rejectionReason   String?
  modificationNotes String?
  attachmentUrls    String?
  externalItemId    Int?
  lastSyncedAt      DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  approvedBy        String?
  approvedAt        DateTime?
  isDeleted         Boolean             @default(false)
  PurchaseOrderItem PurchaseOrderItem[]
  PurchaseRequest   PurchaseRequest     @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)

  @@index([isDeleted])
  @@index([itemStatus])
  @@index([purchaseRequestId])
  @@index([supplierId])
}

model RefundReplacement {
  id                     Int                     @id @default(autoincrement())
  refNo                  String                  @unique
  purchaseOrderId        Int                     @unique
  status                 RefundReplacementStatus @default(PENDING)
  issueType              String
  totalAffectedItems     Int                     @default(0)
  totalRefundAmount      Decimal?                @db.Decimal(12, 2)
  totalReplacementCost   Decimal?                @db.Decimal(12, 2)
  resolutionType         String?
  replacementAttempts    Int                     @default(0)
  maxReplacementAttempts Int                     @default(3)
  supplierNotifiedAt     DateTime?
  supplierResponseAt     DateTime?
  supplierResolution     String?
  reportedDate           DateTime                @default(now())
  resolutionDate         DateTime?
  resolutionDeadline     DateTime?
  remarks                String?
  externalRefNo          String?
  lastSyncedAt           DateTime?
  lastSyncStatus         String?
  createdBy              String?
  createdAt              DateTime                @default(now())
  updatedBy              String?
  updatedAt              DateTime
  approvedBy             String?
  approvedAt             DateTime?
  rejectedBy             String?
  rejectedAt             DateTime?
  closedBy               String?
  closedAt               DateTime?
  deletedBy              String?
  deletedAt              DateTime?
  isDeleted              Boolean                 @default(false)
  PurchaseOrder          PurchaseOrder           @relation(fields: [purchaseOrderId], references: [id])
  RefundReplacementItem  RefundReplacementItem[]

  @@index([createdAt])
  @@index([isDeleted])
  @@index([issueType])
  @@index([resolutionDeadline])
  @@index([status])
}

model RefundReplacementItem {
  id                      Int               @id @default(autoincrement())
  refundReplacementId     Int
  purchaseOrderItemId     Int
  itemName                String
  affectedQuantity        Int
  unitCost                Decimal           @db.Decimal(12, 2)
  issueType               String
  issueDescription        String?
  photosUrls              String?
  itemResolution          String?
  refundAmount            Decimal?          @db.Decimal(12, 2)
  replacementQuantity     Int?
  replacementReceived     Boolean           @default(false)
  replacementReceivedDate DateTime?
  itemStatus              String            @default("pending")
  createdAt               DateTime          @default(now())
  updatedAt               DateTime
  resolvedAt              DateTime?
  isDeleted               Boolean           @default(false)
  PurchaseOrderItem       PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])
  RefundReplacement       RefundReplacement @relation(fields: [refundReplacementId], references: [id], onDelete: Cascade)

  @@index([itemStatus])
  @@index([purchaseOrderItemId])
  @@index([refundReplacementId])
}

model Reimbursement {
  id               Int            @id @default(autoincrement())
  employeeId       Int
  amount           Decimal        @db.Decimal(12, 2)
  purpose          String
  status           ApprovalStatus @default(PENDING)
  receiptUrl       String?
  disbursementDate DateTime?
  isDisbursed      Boolean        @default(false)
  disbursedBy      String?
  externalRefNo    String?
  lastSyncedAt     DateTime?
  lastSyncStatus   String?
  createdBy        String?
  createdAt        DateTime       @default(now())
  updatedBy        String?
  updatedAt        DateTime
  approvedBy       String?
  approvedAt       DateTime?
  rejectedBy       String?
  rejectedAt       DateTime?
  deletedBy        String?
  deletedAt        DateTime?
  isDeleted        Boolean        @default(false)

  @@index([employeeId, status])
  @@index([isDeleted])
}

model Revenue {
  id                      Int         @id @default(autoincrement())
  code                    String      @unique
  revenueType             RevenueType
  amount                  Decimal     @db.Decimal(12, 2)
  dateRecorded            DateTime
  remarks                 String?
  sourceRefNo             String?
  department              String?
  rentalDownpayment       Decimal?    @db.Decimal(12, 2)
  rentalBalance           Decimal?    @db.Decimal(12, 2)
  downpaymentReceivedAt   DateTime?
  balanceReceivedAt       DateTime?
  isDownpaymentRefundable Boolean     @default(false)
  otherRevenueCategory    String?
  receiptUrl              String?
  isVerified              Boolean     @default(false)
  verifiedBy              String?
  verifiedAt              DateTime?
  externalRefNo           String?
  lastSyncedAt            DateTime?
  lastSyncStatus          String?
  createdBy               String?
  createdAt               DateTime    @default(now())
  updatedBy               String?
  updatedAt               DateTime
  approvedBy              String?
  approvedAt              DateTime?
  rejectedBy              String?
  rejectedAt              DateTime?
  deletedBy               String?
  deletedAt               DateTime?
  isDeleted               Boolean     @default(false)

  @@index([isDeleted])
  @@index([revenueType, dateRecorded])
  @@index([sourceRefNo])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InstallmentFrequency {
  DAILY
  WEEKLY
  SEMI_MONTHLY
  MONTHLY
  YEARLY
}

enum ItemApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  MODIFIED
}

enum LoanType {
  EMPLOYEE
  EXTERNAL
  TRIP_DEFICIT
}

enum PurchaseOrderStatus {
  PENDING
  PENDING_ADJUSTED
  RECEIVED
  PARTIALLY_COMPLETED
  TO_BE_REFUNDED
  TO_BE_REPLACED
  CLOSED
  CLOSED_FAILED
}

enum PurchaseRequestStatus {
  DRAFT
  POSTED
  REJECTED
  APPROVED
  CLOSED
}

enum RefundReplacementStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESS_REFUND
  PROCESS_REPLACEMENT
  CLOSED
  CLOSED_FAILED
}

enum RepaymentStatus {
  PENDING
  PAID
  OVERDUE
  WAIVED
}

enum RequestType {
  REGULAR
  PROJECT_BASED
  BUDGET_SHORTAGE
  URGENT
  EMERGENCY
}

enum RevenueType {
  TRIP
  RENTAL
  OTHER
}
