generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sequence {
  name  String @id
  value Int    @default(1)
}

model ExpenseRecord {
  expense_id        String              @id
  assignment_id     String?
  bus_trip_id       String?
  total_amount      Decimal             @db.Decimal(20, 4)
  created_at        DateTime            @default(now())
  updated_at        DateTime?
  created_by        String
  expense_date      DateTime
  is_deleted        Boolean             @default(false)
  category_id       String
  source_id         String?
  payment_method_id String
  payment_method    GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id])
  payment_status_id String
  payment_status    GlobalPaymentStatus @relation(fields: [payment_status_id], references: [id])
  category          GlobalCategory      @relation(fields: [category_id], references: [id])
  source            GlobalSource?       @relation(fields: [source_id], references: [id])
  reimbursements    Reimbursement[]

  @@unique([category_id, assignment_id, expense_date], name: "unique_expense_assignment")
  @@unique([category_id, assignment_id, bus_trip_id, expense_date], name: "unique_expense_assignment_trip")
  @@unique([category_id, source_id, total_amount, expense_date], name: "unique_expense_other")
}

model RevenueRecord {
  revenue_id          String               @id
  assignment_id       String?
  bus_trip_id         String?
  // Amounts
  principal_amount    Decimal              @default(0) @db.Decimal(20, 4)
  total_amount        Decimal              @db.Decimal(20, 4)
  outstanding_balance Decimal              @default(0) @db.Decimal(20, 4)
  created_by          String               @default("ftms_user")
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  updated_by          String               @default("ftms_user")
  is_deleted          Boolean              @default(false)
  deleted_at          DateTime?
  deleted_by          String?              @default("ftms_user")
  collection_date     DateTime             @default(now())
  category_id         String
  source_id           String?
  // Payment info and remarks
  payment_method_id   String?
  payment_status_id   String
  remarks             String?              @db.VarChar(500)
  // Accounts Receivable (AR) fields
  is_receivable       Boolean              @default(false)
  due_date            DateTime?
  payer_name          String?              @db.VarChar(255)
  interest_rate       Decimal              @default(0) @db.Decimal(10, 4)
  schedule_type       ScheduleType         @default(NONE)
  // New FK to global schedule type (migration phase 1)
  schedule_type_id    String?
  scheduleType        GlobalScheduleType?  @relation(name: "ScheduleTypeToRevenueRecord", fields: [schedule_type_id], references: [id])
  category            GlobalCategory       @relation(fields: [category_id], references: [id])
  source              GlobalSource?        @relation(fields: [source_id], references: [id])
  payment_method      GlobalPaymentMethod? @relation(fields: [payment_method_id], references: [id])
  payment_status      GlobalPaymentStatus  @relation(fields: [payment_status_id], references: [id])
  loans               Loan[]
  installments        RevenueInstallment[]
  payments            RevenuePayment[]
  // Relations to BusTripCache (cache of operations bus trips)
  // Mapping clarification:
  // - RevenueRecord.assignment_id -> BusTripCache.assignment_id (PK)
  // - RevenueRecord.bus_trip_id   -> BusTripCache.bus_trip_id (unique)
  busTripByAssignment BusTripCache?       @relation("RevenueToBusTripByAssignment", fields: [assignment_id], references: [assignment_id], onDelete: SetNull, onUpdate: Cascade)
  busTripByTripId     BusTripCache?       @relation("RevenueToBusTripByTripId", fields: [bus_trip_id], references: [bus_trip_id], onDelete: SetNull, onUpdate: Cascade)

  // Ensure only one revenue per assignment+BusTrip
  @@unique([assignment_id, bus_trip_id], name: "unique_revenue_trip_assignment")
  @@unique([category_id, source_id, total_amount, collection_date], name: "unique_revenue_other")
  @@index([assignment_id])
  @@index([bus_trip_id])
  @@index([payment_status_id])
  @@index([payment_method_id])
}

// Generic attachments for multiple modules
model Attachment {
  id            String   @id @default(uuid())
  module_name   String // e.g., revenue, expense, loan, payroll
  record_id     String // PK value of the referenced module record
  // Local filesystem path (legacy). Optional when using cloud storage like Google Drive.
  path          String?
  // Google Drive file id (if stored in Drive)
  file_id       String?
  original_name String
  mime_type     String
  size_bytes    Int
  uploaded_at   DateTime @default(now())
  is_deleted    Boolean  @default(false)

  @@index([module_name, record_id])
}

// Persisted OAuth2 tokens for Google APIs (Drive)
model GoogleOAuthToken {
  id            String    @id // e.g., "drive"
  access_token  String?
  refresh_token String
  scope         String?
  token_type    String?
  expiry_date   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

// Installments for Accounts Receivable revenues
model RevenueInstallment {
  id                 String            @id @default(uuid())
  revenue_id         String
  installment_number Int
  due_date           DateTime
  amount_due         Decimal           @db.Decimal(20, 4)
  amount_paid        Decimal           @default(0) @db.Decimal(20, 4)
  status             InstallmentStatus @default(PENDING)
  // New FK to global installment status (migration phase 1)
  installment_status_id String?
  installmentStatus     GlobalInstallmentStatus? @relation(name: "InstallmentStatusToRevenueInstallment", fields: [installment_status_id], references: [id])
  payment_status_id  String
  payment_method_id  String?
  paid_date          DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  revenue        RevenueRecord        @relation(fields: [revenue_id], references: [revenue_id], onDelete: Cascade)
  payment_status GlobalPaymentStatus  @relation(fields: [payment_status_id], references: [id])
  payment_method GlobalPaymentMethod? @relation(fields: [payment_method_id], references: [id])
  payments       RevenuePayment[]

  @@unique([revenue_id, installment_number])
  @@index([revenue_id])
  @@index([installment_status_id])
}

// Payments against Revenues and optional Installments
model RevenuePayment {
  id                String   @id @default(uuid())
  revenue_id        String
  installment_id    String?
  amount            Decimal  @db.Decimal(20, 4)
  payment_status_id String
  payment_method_id String
  paid_date         DateTime @default(now())
  reference_number  String?
  remarks           String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  revenue        RevenueRecord       @relation(fields: [revenue_id], references: [revenue_id], onDelete: Cascade)
  installment    RevenueInstallment? @relation(fields: [installment_id], references: [id], onDelete: SetNull)
  payment_status GlobalPaymentStatus @relation(fields: [payment_status_id], references: [id])
  payment_method GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id])

  @@index([revenue_id])
  @@index([installment_id])
}

model AuditLog {
  log_id         String   @id @default(uuid())
  action         String
  table_affected String
  record_id      String
  performed_by   String
  timestamp      DateTime @default(now())
  ip_address     String?
  details        Json?
}

model AssignmentCache {
  assignment_id       String   @id
  bus_route           String
  bus_type            String
  date_assigned       DateTime
  trip_fuel_expense   Decimal  @db.Decimal(20, 4)
  trip_revenue        Decimal  @db.Decimal(20, 4)
  is_revenue_recorded Boolean  @default(false)
  assignment_type     String
  last_updated        DateTime @default(now())
  is_expense_recorded Boolean  @default(false)
  assignment_value    Decimal  @db.Decimal(20, 4)
  bus_plate_number    String
  payment_method      String
  conductor_id        String
  driver_id           String
}

// Cache of HR Employees
model EmployeeCache {
  // Employee number from HR system (e.g., EMP-0001)
  employee_number String   @id
  first_name      String
  middle_name     String?
  last_name       String
  phone           String?
  position        String
  department_id   Int
  department      String
  // Timestamps
  last_synced_at  DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([department_id])
  @@index([department])
}

// Cache of HR Payroll records (flattened + JSON details)
model PayrollCache {
  // One row per employeeNumber in the upstream payload
  employee_number  String   @id
  first_name       String
  middle_name      String?
  last_name        String
  suffix           String?
  employee_status  String
  hire_date        DateTime
  termination_date DateTime?
  basic_rate       Decimal  @db.Decimal(20, 4)
  position_name    String
  department_name  String
  // Keep arrays as JSON blobs for flexibility
  attendances      Json?
  benefits         Json?
  deductions       Json?
  // Timestamps
  last_synced_at   DateTime @default(now())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@index([department_name])
  @@index([employee_status])
}

// Cache of Operations Bus Trips
model BusTripCache {
  // Use assignment_id as the stable primary key
  assignment_id       String   @id
  bus_trip_id         String
  bus_route           String
  is_revenue_recorded Boolean  @default(false)
  is_expense_recorded Boolean  @default(false)
  date_assigned       DateTime
  trip_fuel_expense   Decimal  @db.Decimal(20, 4)
  trip_revenue        Decimal  @db.Decimal(20, 4)
  assignment_type     String
  assignment_value    Decimal  @db.Decimal(20, 4)
  payment_method      String
  driver_name         String
  conductor_name      String
  bus_plate_number    String
  bus_type            String
  body_number         String
  // Timestamps
  last_synced_at      DateTime @default(now())
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@unique([bus_trip_id])
  @@index([date_assigned])
  @@index([is_revenue_recorded])
  // Back-relations for RevenueRecord
  revenuesByAssignment RevenueRecord[] @relation("RevenueToBusTripByAssignment")
  revenuesByTripId     RevenueRecord[] @relation("RevenueToBusTripByTripId")
}

model Reimbursement {
  reimbursement_id  String               @id @default(uuid())
  expense_id        String
  employee_id       String
  employee_name     String
  job_title         String?
  amount            Decimal              @db.Decimal(20, 4)
  requested_date    DateTime             @default(now())
  approved_by       String?
  approved_date     DateTime?
  rejection_reason  String?
  paid_by           String?
  paid_date         DateTime?
  payment_reference String?
  payment_method_id String?
  created_by        String
  created_at        DateTime             @default(now())
  updated_by        String?
  updated_at        DateTime?
  is_deleted        Boolean              @default(false)
  cancelled_by      String?
  cancelled_date    DateTime?
  status            ReimbursementStatus
  // New FK to global reimbursement status (migration phase 1)
  reimbursement_status_id String?
  reimbursement_status    GlobalReimbursementStatus? @relation(name: "ReimbursementStatusToReimbursement", fields: [reimbursement_status_id], references: [id])
  remarks           String?
  expense           ExpenseRecord        @relation(fields: [expense_id], references: [expense_id])
  payment_method    GlobalPaymentMethod? @relation(fields: [payment_method_id], references: [id])

  @@unique([expense_id, employee_id])
  @@index([reimbursement_status_id])
}

model GlobalSource {
  id           String          @id @default(uuid())
  name         String          @unique
  is_active    Boolean         @default(true)
  is_deleted   Boolean         @default(false)
  created_at   DateTime        @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  revenues     RevenueRecord[]
  module_links ModuleSource[]
}

model GlobalCategory {
  id           String           @id @default(uuid())
  name         String           @unique
  is_active    Boolean          @default(true)
  is_deleted   Boolean          @default(false)
  created_at   DateTime         @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  revenues     RevenueRecord[]
  module_links ModuleCategory[]
}

model GlobalTerms {
  id           String        @id @default(uuid())
  name         String        @unique
  is_active    Boolean       @default(true)
  is_deleted   Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime?
  module_links ModuleTerms[]
}

model GlobalPaymentMethod {
  id                   String                @id @default(uuid())
  name                 String                @unique
  is_active            Boolean               @default(true)
  is_deleted           Boolean               @default(false)
  created_at           DateTime              @default(now())
  updated_at           DateTime?
  expenses             ExpenseRecord[]
  revenues             RevenueRecord[]
  reimbursements       Reimbursement[]
  revenue_installments RevenueInstallment[]
  revenue_payments     RevenuePayment[]
  module_links         ModulePaymentMethod[]
}

model GlobalPaymentStatus {
  id                   String               @id @default(uuid())
  name                 String               @unique
  applicable_modules   String[]
  is_active            Boolean              @default(true)
  is_deleted           Boolean              @default(false)
  created_at           DateTime             @default(now())
  updated_at           DateTime?
  expenses             ExpenseRecord[]
  revenues             RevenueRecord[]
  revenue_installments RevenueInstallment[]
  revenue_payments     RevenuePayment[]
}

model ModuleCategory {
  id          String         @id @default(uuid())
  module_name String
  category_id String
  category    GlobalCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_at  DateTime       @default(now())
  updated_at  DateTime?

  @@unique([module_name, category_id])
  @@index([module_name])
  @@index([category_id])
}

model ModuleSource {
  id          String       @id @default(uuid())
  module_name String
  source_id   String
  source      GlobalSource @relation(fields: [source_id], references: [id], onDelete: Cascade)
  created_at  DateTime     @default(now())
  updated_at  DateTime?

  @@unique([module_name, source_id])
  @@index([module_name])
  @@index([source_id])
}

model ModuleTerms {
  id          String      @id @default(uuid())
  module_name String
  terms_id    String
  terms       GlobalTerms @relation(fields: [terms_id], references: [id], onDelete: Cascade)
  created_at  DateTime    @default(now())
  updated_at  DateTime?

  @@unique([module_name, terms_id])
  @@index([module_name])
  @@index([terms_id])
}

model ModulePaymentMethod {
  id                String              @id @default(uuid())
  module_name       String
  payment_method_id String
  payment_method    GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id], onDelete: Cascade)
  created_at        DateTime            @default(now())
  updated_at        DateTime?

  @@unique([module_name, payment_method_id])
  @@index([module_name])
  @@index([payment_method_id])
}

model PayrollFrequencyConfig {
  id                String    @id @default(uuid())
  employee_number   String    @unique
  payroll_frequency Frequency
  // New FK to global frequency (migration phase 1)
  frequency_id      String?
  frequency         GlobalFrequency? @relation(name: "GlobalFrequencyToPayrollFrequencyConfig", fields: [frequency_id], references: [id])
  effective_date    DateTime
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model PayrollConfiguration {
  id                   String   @id @default(uuid())
  company_id           String
  default_work_days    Int      @default(22)
  weekend_work_allowed Boolean  @default(false)
  holiday_work_rate    Decimal  @default(1.5) @db.Decimal(5, 2)
  overtime_rate        Decimal  @default(1.25) @db.Decimal(5, 2)
  created_at           DateTime @default(now())
}

model PayrollRecord {
  payroll_id              String        @id @default(uuid())
  employee_number         String
  employee_name           String
  first_name              String
  middle_name             String?
  last_name               String
  suffix                  String?
  employee_status         String
  hire_date               DateTime
  termination_date        DateTime?
  job_title               String
  department              String
  payroll_period          Frequency
  // New FKs to global frequency/status (migration phase 1)
  payroll_period_id       String?
  payrollPeriod           GlobalFrequency? @relation(name: "GlobalFrequencyToPayrollRecord", fields: [payroll_period_id], references: [id])
  payroll_start_date      DateTime
  payroll_end_date        DateTime
  basic_rate              Decimal       @db.Decimal(20, 4)
  days_worked             Int           @default(0)
  basic_pay               Decimal       @default(0) @db.Decimal(20, 4)
  overtime_regular        Decimal       @default(0) @db.Decimal(20, 4)
  overtime_holiday        Decimal       @default(0) @db.Decimal(20, 4)
  service_incentive_leave Decimal       @default(0) @db.Decimal(20, 4)
  holiday_pay             Decimal       @default(0) @db.Decimal(20, 4)
  thirteenth_month_pay    Decimal       @default(0) @db.Decimal(20, 4)
  revenue_benefit         Decimal       @default(0) @db.Decimal(20, 4)
  safety_benefit          Decimal       @default(0) @db.Decimal(20, 4)
  additional_benefits     Decimal       @default(0) @db.Decimal(20, 4)
  sss_deduction           Decimal       @default(0) @db.Decimal(20, 4)
  philhealth_deduction    Decimal       @default(0) @db.Decimal(20, 4)
  pag_ibig_deduction      Decimal       @default(0) @db.Decimal(20, 4)
  cash_advance            Decimal       @default(0) @db.Decimal(20, 4)
  damage_shortage         Decimal       @default(0) @db.Decimal(20, 4)
  other_deductions        Decimal       @default(0) @db.Decimal(20, 4)
  gross_total_earnings    Decimal       @default(0) @db.Decimal(20, 4)
  total_deductions        Decimal       @default(0) @db.Decimal(20, 4)
  net_pay                 Decimal       @default(0) @db.Decimal(20, 4)
  status                  PayrollStatus @default(PENDING)
  payroll_status_id       String?
  payrollStatus           GlobalPayrollStatus? @relation(name: "GlobalPayrollStatusToPayrollRecord", fields: [payroll_status_id], references: [id])
  date_released           DateTime?
  created_by              String
  created_at              DateTime      @default(now())
  updated_by              String?
  updated_at              DateTime?
  is_deleted              Boolean       @default(false)
  calculation_notes       String?
  deleted_at              DateTime?
  deleted_by              String?
  hr_data_snapshot        Json?
  processed_benefits      Json?
  processed_deductions    Json?

  @@unique([employee_number, payroll_start_date, payroll_end_date])
  @@index([payroll_start_date, payroll_end_date])
  @@index([employee_number, is_deleted])
  @@index([payroll_period_id])
  @@index([payroll_status_id])
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  PENDING
  VALIDATED
  PAID
}

enum Frequency {
  WEEKLY
  SEMI_MONTHLY
  MONTHLY
}

// --- Revenue AR Enums ---
enum InstallmentStatus {
  PENDING
  PARTIAL
  PAID
  OVERPAID
  LATE
}

enum ScheduleType {
  NONE
  DAILY
  WEEKLY
  SEMI_MONTHLY
  MONTHLY
}

// --- Global reference tables (to deprecate enums gradually) ---
model GlobalInstallmentStatus {
  id         String                 @id @default(uuid())
  name       String                 @unique
  is_active  Boolean                @default(true)
  is_deleted Boolean                @default(false)
  created_at DateTime               @default(now())
  updated_at DateTime?
  // back-relations
  revenue_installments RevenueInstallment[] @relation("InstallmentStatusToRevenueInstallment")
  module_links ModuleInstallmentStatus[]
}

model ModuleInstallmentStatus {
  id                      String                   @id @default(uuid())
  module_name             String
  installment_status_id   String
  installment_status      GlobalInstallmentStatus  @relation(fields: [installment_status_id], references: [id], onDelete: Cascade)
  created_at              DateTime                 @default(now())
  updated_at              DateTime?

  @@unique([module_name, installment_status_id])
  @@index([module_name])
  @@index([installment_status_id])
}

model GlobalScheduleType {
  id         String             @id @default(uuid())
  name       String             @unique
  is_active  Boolean            @default(true)
  is_deleted Boolean            @default(false)
  created_at DateTime           @default(now())
  updated_at DateTime?
  // back-relations
  revenues RevenueRecord[] @relation("ScheduleTypeToRevenueRecord")
  module_links ModuleScheduleType[]
}

model ModuleScheduleType {
  id                String             @id @default(uuid())
  module_name       String
  schedule_type_id  String
  schedule_type     GlobalScheduleType @relation(fields: [schedule_type_id], references: [id], onDelete: Cascade)
  created_at        DateTime           @default(now())
  updated_at        DateTime?

  @@unique([module_name, schedule_type_id])
  @@index([module_name])
  @@index([schedule_type_id])
}

model GlobalPayrollStatus {
  id           String                @id @default(uuid())
  name         String                @unique
  is_active    Boolean               @default(true)
  is_deleted   Boolean               @default(false)
  created_at   DateTime              @default(now())
  updated_at   DateTime?
  // back-relations
  payroll_records PayrollRecord[] @relation("GlobalPayrollStatusToPayrollRecord")
  module_links ModulePayrollStatus[]
}

model ModulePayrollStatus {
  id                 String              @id @default(uuid())
  module_name        String
  payroll_status_id  String
  payroll_status     GlobalPayrollStatus @relation(fields: [payroll_status_id], references: [id], onDelete: Cascade)
  created_at         DateTime            @default(now())
  updated_at         DateTime?

  @@unique([module_name, payroll_status_id])
  @@index([module_name])
  @@index([payroll_status_id])
}

model GlobalFrequency {
  id           String             @id @default(uuid())
  name         String             @unique
  is_active    Boolean            @default(true)
  is_deleted   Boolean            @default(false)
  created_at   DateTime           @default(now())
  updated_at   DateTime?
  // back-relations
  payroll_frequency_configs PayrollFrequencyConfig[] @relation("GlobalFrequencyToPayrollFrequencyConfig")
  payroll_records           PayrollRecord[]          @relation("GlobalFrequencyToPayrollRecord")
  module_links ModuleFrequency[]
}

model ModuleFrequency {
  id            String          @id @default(uuid())
  module_name   String
  frequency_id  String
  frequency     GlobalFrequency @relation(fields: [frequency_id], references: [id], onDelete: Cascade)
  created_at    DateTime        @default(now())
  updated_at    DateTime?

  @@unique([module_name, frequency_id])
  @@index([module_name])
  @@index([frequency_id])
}

model GlobalReimbursementStatus {
  id           String                     @id @default(uuid())
  name         String                     @unique
  is_active    Boolean                    @default(true)
  is_deleted   Boolean                    @default(false)
  created_at   DateTime                   @default(now())
  updated_at   DateTime?
  // back-relations
  reimbursements Reimbursement[] @relation("ReimbursementStatusToReimbursement")
  module_links ModuleReimbursementStatus[]
}

model ModuleReimbursementStatus {
  id                        String                   @id @default(uuid())
  module_name               String
  reimbursement_status_id   String
  reimbursement_status      GlobalReimbursementStatus @relation(fields: [reimbursement_status_id], references: [id], onDelete: Cascade)
  created_at                DateTime                 @default(now())
  updated_at                DateTime?

  @@unique([module_name, reimbursement_status_id])
  @@index([module_name])
  @@index([reimbursement_status_id])
}

// --- Loans (Quota shortfall) ---
enum EmployeeType {
  driver
  conductor
}

model Loan {
  id            String       @id @default(uuid())
  revenue_id    String
  employee_type EmployeeType
  amount        Decimal      @db.Decimal(20, 4)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  revenue RevenueRecord @relation(fields: [revenue_id], references: [revenue_id])

  @@unique([revenue_id, employee_type], name: "revenue_id_employee_type")
  @@index([revenue_id])
}
