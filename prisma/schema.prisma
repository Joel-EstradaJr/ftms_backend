generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExpenseCategory {
  Fuel
  Vehicle_Parts
  Tools
  Equipment
  Supplies
  Other
  Multiple_Categories
}

enum RevenueCategory {
  Boundary
  Percentage
  Bus_Rental
  Other
}

enum Department {
  Operations
  Inventory
  Human_Resources
}

enum ReceiptStatus {
  Paid
  Pending
  Cancelled
  Dued
}

enum ReceiptSource {
  Manual_Entry
  OCR_Camera
  OCR_File
}

enum ExportFormat {
  CSV
  PDF
}

enum PaymentStatus {
  Paid
  Pending
  Cancelled
  Dued
}

enum RecordStatus {
  Active
  Inactive
}

enum Terms {
  Net_15
  Net_30
  Net_60
  Net_90
  Cash
}

enum ItemUnit {
  piece
  box
  pack
  liter
  gallon
  milliliter
  kilogram
  gram
  meter
  foot
  roll
  set
  pair
  Other
}



model Sequence {
  name  String @id
  value Int    @default(1)
}

model ExpenseRecord {
  expense_id     String   @id
  assignment_id  String?
  receipt_id     String?  @unique
  receipt        Receipt? @relation(fields: [receipt_id], references: [receipt_id])
  category       ExpenseCategory
  total_amount   Decimal  @db.Decimal(20, 4)
  expense_date   DateTime
  created_by     String
  created_at     DateTime @default(now())
  updated_at     DateTime?
  is_deleted     Boolean  @default(false)
  other_source   String?
  other_category String?

  // Constraint for assignment-based records
  @@unique([category, assignment_id, expense_date], name: "unique_expense_assignment")
  // Constraint for receipt-based records
  @@unique([category, receipt_id, expense_date], name: "unique_expense_receipt")
  // Constraint for other-source records
  @@unique([category, other_source, other_category, total_amount, expense_date], name: "unique_expense_other")
}

model RevenueRecord {
  revenue_id     String   @id
  assignment_id  String?
  category       RevenueCategory
  total_amount   Decimal  @db.Decimal(20, 4)
  collection_date DateTime
  created_by     String
  created_at     DateTime @default(now())
  updated_at     DateTime?
  is_deleted     Boolean  @default(false)
  other_source   String?

  // Constraint for assignment-based records
  @@unique([category, assignment_id, collection_date], name: "unique_revenue_assignment")
  // Constraint for other-source records
  @@unique([category, other_source, total_amount, collection_date], name: "unique_revenue_other")
}

model AuditLog {
  log_id         String   @id @default(uuid())
  action         String
  table_affected String   // Can be "ExpenseRecord", "RevenueRecord", "Receipt", etc.
  record_id      String
  performed_by   String
  timestamp      DateTime @default(now())
  details        Json?    // Store old_values, new_values, and other metadata
  ip_address     String?
}

model AssignmentCache {
  assignment_id     String   @id
  bus_bodynumber    String
  bus_platenumber   String
  bus_route         String
  bus_type         String
  driver_name      String
  conductor_name   String
  date_assigned    DateTime
  trip_fuel_expense Decimal  @db.Decimal(20, 4)
  trip_revenue     Decimal  @db.Decimal(20, 4)
  is_revenue_recorded      Boolean  @default(false)
  is_expense_recorded      Boolean  @default(false)
  assignment_type  String
  last_updated     DateTime @default(now())
}

model Receipt {
  receipt_id          String   @id
  supplier           String
  transaction_date   DateTime
  vat_reg_tin        String?
  terms              Terms     @default(Cash)
  date_paid          DateTime?
  payment_status     PaymentStatus @default(Pending)
  record_status      RecordStatus @default(Active)
  total_amount       Decimal   @db.Decimal(20, 4)
  vat_amount         Decimal?  @db.Decimal(20, 4)
  total_amount_due   Decimal   @db.Decimal(20, 4)
  created_at         DateTime @default(now())
  updated_at         DateTime?
  created_by         String
  updated_by         String?
  is_deleted         Boolean   @default(false)
  deletion_reason    String?
  deleted_by         String?
  deleted_at         DateTime?
  source             ReceiptSource @default(Manual_Entry)
  category           ExpenseCategory
  other_category     String?
  remarks            String?
  ocr_confidence     Float?    // Overall OCR confidence score
  ocr_file_path      String?   // Path to stored receipt image/file
  is_expense_recorded Boolean  @default(false)  // Track if receipt is already recorded as expense
  items              ReceiptItem[]
  transactions       ItemTransaction[]
  expense            ExpenseRecord?
  exports            ReceiptExport[]
  ocr_fields         ReceiptOCRField[]
  keywords           ReceiptKeyword[]
  storage_size_bytes BigInt?   // Size of associated files in bytes
}

model ReceiptItem {
  receipt_item_id    String   @id
  receipt_id        String
  item_id           String
  receipt           Receipt   @relation(fields: [receipt_id], references: [receipt_id], onDelete: Cascade)
  item              Item      @relation(fields: [item_id], references: [item_id])
  quantity          Decimal   @db.Decimal(10, 2)
  unit_price        Decimal   @db.Decimal(20, 4)
  total_price       Decimal   @db.Decimal(20, 4)
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  created_by        String
  updated_by        String?
  is_deleted        Boolean   @default(false)
  ocr_confidence    Float?    // OCR confidence score for this item

  @@unique([receipt_id, item_id])
}

model Item {
  item_id       String   @id
  item_name     String   @unique
  unit          String
  category      ExpenseCategory
  other_unit    String?
  other_category String?
  created_at    DateTime @default(now())
  updated_at    DateTime?
  is_deleted    Boolean  @default(false)
  transactions  ItemTransaction[]
  receipt_items ReceiptItem[]
}

model ItemTransaction {
  transaction_id String   @id
  item_id       String
  item          Item     @relation(fields: [item_id], references: [item_id])
  receipt_id    String?
  receipt       Receipt? @relation(fields: [receipt_id], references: [receipt_id])
  quantity      Decimal  @db.Decimal(10, 2)
  unit_price    Decimal  @db.Decimal(20, 4)
  transaction_date DateTime @default(now())
  created_by    String
  created_at    DateTime @default(now())
  updated_at    DateTime?
  is_deleted    Boolean  @default(false)

  @@index([item_id, transaction_date])
}

model ReceiptExport {
  export_id     String   @id
  receipt_id    String
  receipt       Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  format        ExportFormat
  exported_by   String
  exported_at   DateTime @default(now())
  filters_used  Json?    // Store the filters used during export
  file_path     String?  // Path to exported file
}

model ReceiptStorageConfig {
  config_id           String   @id
  auto_archive_months Int      @default(6)    // Archive receipts older than X months
  last_cleanup        DateTime @default(now()) // Last storage cleanup timestamp
  updated_by         String
  updated_at         DateTime @default(now())
}

model ReceiptOCRField {
  field_id           String   @id
  receipt_id         String
  receipt            Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  field_name         String   // e.g., "supplier", "amount", "date"
  extracted_value    String
  confidence_score   Float
  is_verified        Boolean  @default(false)
  verified_by        String?
  verified_at        DateTime?
  original_image_coords Json?    // Store coordinates where field was found in image
  created_at         DateTime @default(now())
  updated_at         DateTime?

  @@unique([receipt_id, field_name])
}

model ReceiptKeyword {
  keyword_id     String   @id
  receipt_id     String
  receipt        Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  keyword        String
  source         String   // "ocr" or "manual"
  confidence     Float?
  created_at     DateTime @default(now())

  @@index([keyword])
}

model ReceiptStorageMetrics {
  metric_id           String   @id
  total_receipts      Int      @default(0)
  storage_used_bytes  BigInt   @default(0)
  last_updated        DateTime @default(now())
  created_by          String
  updated_by          String?
}