generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sequence {
  name  String @id
  value Int    @default(1)
}

model ExpenseRecord {
  expense_id        String              @id
  assignment_id     String?
  bus_trip_id       String?
  total_amount      Decimal             @db.Decimal(20, 4)
  created_at        DateTime            @default(now())
  updated_at        DateTime?
  created_by        String
  expense_date      DateTime
  is_deleted        Boolean             @default(false)
  category_id       String
  source_id         String?
  payment_method_id String
  payment_method    GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id])
  payment_status    PaymentStatus
  category          GlobalCategory      @relation(fields: [category_id], references: [id])
  source            GlobalSource?       @relation(fields: [source_id], references: [id])
  reimbursements    Reimbursement[]

  @@unique([category_id, assignment_id, expense_date], name: "unique_expense_assignment")
  @@unique([category_id, assignment_id, bus_trip_id, expense_date], name: "unique_expense_assignment_trip")
  @@unique([category_id, source_id, total_amount, expense_date], name: "unique_expense_other")
}

model RevenueRecord {
  revenue_id      String         @id
  assignment_id   String?
  bus_trip_id     String?
  total_amount    Decimal        @db.Decimal(20, 4)
  created_by      String
  created_at      DateTime       @default(now())
  updated_at      DateTime?
  is_deleted      Boolean        @default(false)
  collection_date DateTime
  category_id     String
  source_id       String?
  category        GlobalCategory @relation(fields: [category_id], references: [id])
  source          GlobalSource?  @relation(fields: [source_id], references: [id])

  @@unique([category_id, assignment_id, collection_date], name: "unique_revenue_assignment")
  @@unique([category_id, source_id, total_amount, collection_date], name: "unique_revenue_other")
}

model AuditLog {
  log_id         String   @id @default(uuid())
  action         String
  table_affected String
  record_id      String
  performed_by   String
  timestamp      DateTime @default(now())
  ip_address     String?
  details        Json?
}

model AssignmentCache {
  assignment_id       String   @id
  bus_route           String
  bus_type            String
  date_assigned       DateTime
  trip_fuel_expense   Decimal  @db.Decimal(20, 4)
  trip_revenue        Decimal  @db.Decimal(20, 4)
  is_revenue_recorded Boolean  @default(false)
  assignment_type     String
  last_updated        DateTime @default(now())
  is_expense_recorded Boolean  @default(false)
  assignment_value    Decimal  @db.Decimal(20, 4)
  bus_plate_number    String
  payment_method      String
  conductor_id        String
  driver_id           String
}

model EmployeeCache {
  employee_id  String   @id
  name         String
  job_title    String
  last_updated DateTime @default(now())
}

model Reimbursement {
  reimbursement_id  String                    @id @default(uuid())
  expense_id        String
  employee_id       String
  employee_name     String
  job_title         String?
  amount            Decimal                   @db.Decimal(20, 4)
  requested_date    DateTime                  @default(now())
  approved_by       String?
  approved_date     DateTime?
  rejection_reason  String?
  paid_by           String?
  paid_date         DateTime?
  payment_reference String?
  payment_method_id String?
  created_by        String
  created_at        DateTime                  @default(now())
  updated_by        String?
  updated_at        DateTime?
  is_deleted        Boolean                   @default(false)
  cancelled_by      String?
  cancelled_date    DateTime?
  status            ReimbursementStatus
  remarks           String?
  expense           ExpenseRecord             @relation(fields: [expense_id], references: [expense_id])
  payment_method    GlobalPaymentMethod?      @relation(fields: [payment_method_id], references: [id])

  @@unique([expense_id, employee_id])
}

model GlobalSource {
  id          String   @id @default(uuid())
  name        String   @unique
  is_active   Boolean  @default(true)
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime?
  expenses    ExpenseRecord[]
  revenues    RevenueRecord[]
  module_links ModuleSource[]
}

model GlobalCategory {
  id           String   @id @default(uuid())
  name         String   @unique
  is_active    Boolean  @default(true)
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  revenues     RevenueRecord[]
  module_links ModuleCategory[]
}

model GlobalTerms {
  id                 String    @id @default(uuid())
  name               String    @unique
  is_active          Boolean   @default(true)
  is_deleted         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime?
  module_links       ModuleTerms[]
}

model GlobalPaymentMethod {
  id           String            @id @default(uuid())
  name         String            @unique
  is_active    Boolean           @default(true)
  is_deleted   Boolean           @default(false)
  created_at   DateTime          @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  reimbursements Reimbursement[]
  module_links ModulePaymentMethod[]
}

model ModuleCategory {
  id           String         @id @default(uuid())
  module_name  String
  category_id  String
  category     GlobalCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_at   DateTime       @default(now())
  updated_at   DateTime?

  @@unique([module_name, category_id])
  @@index([module_name])
  @@index([category_id])
}

model ModuleSource {
  id          String       @id @default(uuid())
  module_name String
  source_id   String
  source      GlobalSource @relation(fields: [source_id], references: [id], onDelete: Cascade)
  created_at  DateTime     @default(now())
  updated_at  DateTime?

  @@unique([module_name, source_id])
  @@index([module_name])
  @@index([source_id])
}

model ModuleTerms {
  id          String      @id @default(uuid())
  module_name String
  terms_id    String
  terms       GlobalTerms @relation(fields: [terms_id], references: [id], onDelete: Cascade)
  created_at  DateTime    @default(now())
  updated_at  DateTime?

  @@unique([module_name, terms_id])
  @@index([module_name])
  @@index([terms_id])
}

model ModulePaymentMethod {
  id                String               @id @default(uuid())
  module_name       String
  payment_method_id String
  payment_method    GlobalPaymentMethod  @relation(fields: [payment_method_id], references: [id], onDelete: Cascade)
  created_at        DateTime             @default(now())
  updated_at        DateTime?

  @@unique([module_name, payment_method_id])
  @@index([module_name])
  @@index([payment_method_id])
}

model PayrollFrequencyConfig {
  id              String   @id @default(uuid())
  employee_number String   @unique
  payroll_frequency Frequency
  effective_date  DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PayrollConfiguration {
  id                   String   @id @default(uuid())
  company_id           String
  default_work_days    Int      @default(22)
  weekend_work_allowed Boolean  @default(false)
  holiday_work_rate    Decimal  @default(1.5) @db.Decimal(5, 2)
  overtime_rate        Decimal  @default(1.25) @db.Decimal(5, 2)
  created_at           DateTime @default(now())
}

model PayrollRecord {
  payroll_id              String    @id @default(uuid())
  employee_number         String
  employee_name           String
  first_name              String
  middle_name             String?
  last_name               String
  suffix                  String?
  employee_status         String
  hire_date               DateTime
  termination_date        DateTime?
  job_title               String
  department              String
  payroll_period          Frequency
  payroll_start_date      DateTime
  payroll_end_date        DateTime
  basic_rate              Decimal   @db.Decimal(20, 4)
  days_worked             Int       @default(0)
  basic_pay               Decimal   @default(0) @db.Decimal(20, 4)
  overtime_regular        Decimal   @default(0) @db.Decimal(20, 4)
  overtime_holiday        Decimal   @default(0) @db.Decimal(20, 4)
  service_incentive_leave Decimal   @default(0) @db.Decimal(20, 4)
  holiday_pay             Decimal   @default(0) @db.Decimal(20, 4)
  thirteenth_month_pay    Decimal   @default(0) @db.Decimal(20, 4)
  revenue_benefit         Decimal   @default(0) @db.Decimal(20, 4)
  safety_benefit          Decimal   @default(0) @db.Decimal(20, 4)
  additional_benefits     Decimal   @default(0) @db.Decimal(20, 4)
  sss_deduction           Decimal   @default(0) @db.Decimal(20, 4)
  philhealth_deduction    Decimal   @default(0) @db.Decimal(20, 4)
  pag_ibig_deduction      Decimal   @default(0) @db.Decimal(20, 4)
  cash_advance            Decimal   @default(0) @db.Decimal(20, 4)
  damage_shortage         Decimal   @default(0) @db.Decimal(20, 4)
  other_deductions        Decimal   @default(0) @db.Decimal(20, 4)
  gross_total_earnings    Decimal   @default(0) @db.Decimal(20, 4)
  total_deductions        Decimal   @default(0) @db.Decimal(20, 4)
  net_pay                 Decimal   @default(0) @db.Decimal(20, 4)
  status                  PayrollStatus @default(PENDING)
  date_released           DateTime?
  created_by              String
  created_at              DateTime  @default(now())
  updated_by              String?
  updated_at              DateTime?
  is_deleted              Boolean   @default(false)
  calculation_notes       String?
  deleted_at              DateTime?
  deleted_by              String?
  hr_data_snapshot        Json?
  processed_benefits      Json?
  processed_deductions    Json?

  @@unique([employee_number, payroll_start_date, payroll_end_date])
  @@index([payroll_start_date, payroll_end_date])
  @@index([employee_number, is_deleted])
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  PENDING
  VALIDATED
  PAID
}

enum Frequency {
  WEEKLY
  SEMI_MONTHLY
  MONTHLY
}

enum PaymentStatus {
  PAID
  PENDING
  DUE
}
