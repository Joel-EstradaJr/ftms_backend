generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== CORE HR STRUCTURES ==================
model Department {
  id             Int         @id @default(autoincrement())
  departmentName String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  candidates     Candidate[]
  positions      Position[]
}

model Position {
  id           Int         @id @default(autoincrement())
  positionName String
  departmentId Int
  candidates   Candidate[]
  employees    Employee[]
  department   Department  @relation(fields: [departmentId], references: [id])
  @@unique([positionName, departmentId])
}

model Employee {
  id                     String               @id @default(cuid())
  employeeNumber         String               @unique
  firstName              String
  lastName               String
  middleName             String?
  suffix                 String?
  birthdate              DateTime
  hiredate               DateTime
  terminationDate        DateTime?
  terminationReason      String?
  basicRate              Decimal?
  employeeStatus         String               @default("active")
  employeeType           String               @default("regular")
  employeeClassification String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  
  // Contact / Address
  phone                  String
  email                  String?              @unique
  emergencyContactName   String?
  emergencyContactNo     String?
  barangay               String
  streetAddress          String
  city                   String
  province               String
  zipCode                String
  country                String
  
  // Employment
  positionId             Int
  position               Position             @relation(fields: [positionId], references: [id])
  
  // Other Details
  expireDate             DateTime?
  licenseNo              String?
  licenseType            String?
  restrictionCodes       String[]             @default([])
  
  // Relations
  attendances            Attendance[]
  benefits               Benefit[]
  deductions             Deduction[]
  cashAdvanceRequests    CashAdvanceRequest[]
  educations             Education[]
  governmentIDs          GovernmentID[]
  leaveRequests          LeaveRequest[]
  resignationRequests    ResignationRequest[]
  workExperiences        WorkExperience[]
  user                   User?                @relation(fields: [id], references: [employeeId])
}

// ================== HR DATA ==================
model Attendance {
  id             Int       @id @default(autoincrement())
  employeeId     String
  date           DateTime
  status         String
  timeIn         DateTime?
  timeOut        DateTime?
  remarks        String?
  isHoliday      Boolean   @default(false)
  overtimeHours  Float?
  overtimeReason String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  employee       Employee  @relation(fields: [employeeId], references: [id])
  @@unique([employeeId, date])
}

model Benefit {
  id            Int         @id @default(autoincrement())
  employeeId    String
  value         Decimal
  frequency     String?
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  benefitTypeId Int
  benefitType   BenefitType @relation(fields: [benefitTypeId], references: [id])
  employee      Employee    @relation(fields: [employeeId], references: [id])
}

model Deduction {
  id              Int           @id @default(autoincrement())
  employeeId      String
  type            String
  value           Decimal
  frequency       String
  effectiveDate   DateTime
  endDate         DateTime?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deductionTypeId Int
  deductionType   DeductionType @relation(fields: [deductionTypeId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])
}

model BenefitType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  benefits    Benefit[]
}

model DeductionType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  deductions  Deduction[]
}

// ================== CANDIDATE MANAGEMENT ==================
model Candidate {
  id                String                    @id @default(cuid())
  firstName         String
  middleName        String?
  lastName          String
  suffix            String?
  email             String?
  streetAddress     String
  barangay          String
  city              String
  province          String
  country           String
  birthdate         DateTime
  applicationStatus String
  applicationDate   DateTime
  sourceOfHire      String?
  departmentId      Int
  desiredPositionId Int
  interviewDate     DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  department        Department                @relation(fields: [departmentId], references: [id])
  position          Position                  @relation(fields: [desiredPositionId], references: [id])
  educations        CandidateEducation[]
  workExperiences   CandidateWorkExperience[]
}

model CandidateWorkExperience {
  id          Int       @id @default(autoincrement())
  candidateId String
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model CandidateEducation {
  id           Int       @id @default(autoincrement())
  candidateId  String
  institution  String
  degree       String
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  honors       String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  candidate    Candidate @relation(fields: [candidateId], references: [id])
}

// ================== EMPLOYEE DOCUMENTS ==================
model GovernmentID {
  id         Int              @id @default(autoincrement())
  employeeId String
  idNumber   String
  issuedDate DateTime?
  expiryDate DateTime?
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  typeId     Int
  employee   Employee         @relation(fields: [employeeId], references: [id])
  type       GovernmentIDType @relation(fields: [typeId], references: [id])
  @@unique([employeeId, typeId])
}

model GovernmentIDType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  governmentIDs GovernmentID[]
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  employeeId  String
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Education {
  id           Int       @id @default(autoincrement())
  employeeId   String
  institution  String?
  degree       String?
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  honors       String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

// ================== EMPLOYEE REQUESTS ==================
model CashAdvanceRequest {
  id           Int       @id @default(autoincrement())
  employeeId   String
  amount       Decimal
  reason       String?
  requestDate  DateTime  @default(now())
  status       String
  approvedDate DateTime?
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

model ResignationRequest {
  id            Int      @id @default(autoincrement())
  employeeId    String
  reason        String?
  requestDate   DateTime @default(now())
  effectiveDate DateTime
  status        String
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model LeaveRequest {
  id           Int       @id @default(autoincrement())
  employeeId   String
  leaveType    String
  startDate    DateTime
  endDate      DateTime
  reason       String?
  status       String
  requestDate  DateTime  @default(now())
  approvedDate DateTime?
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

// ================== USER & AUTH ==================
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model SecurityQuestion {
  id        Int      @id @default(autoincrement())
  question  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id                 Int       @id @default(autoincrement())
  employeeId         String    @unique
  email              String    @unique
  password           String
  firstName          String
  lastName           String
  birthdate          DateTime
  phone              String?
  streetAddress      String?
  barangay           String?
  city               String?
  province           String?
  zipCode            String?
  country            String?
  mustChangePassword Boolean   @default(true)
  roleId             Int
  securityQuestionId Int
  securityAnswer     String
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationships
  role             Role              @relation(fields: [roleId], references: [id])
  securityQuestion SecurityQuestion? @relation(fields: [securityQuestionId], references: [id])
  auditLogs        AuditLog[]
  employee         Employee          @relation(fields: [employeeId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())
  ipAddress String?
  details   String?
  user      User     @relation(fields: [userId], references: [id])
}